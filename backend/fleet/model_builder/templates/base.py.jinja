# flake8: noqa
############################################################################
# This code was autogenerated. Make changes to app/features/model/templates
############################################################################

from typing import Optional, Literal, Union, List, Any, Callable
from typing_extensions import Annotated
import torch
from pydantic import BaseModel, Field
from fleet.options import options_manager
from fleet.model_builder.utils import get_class_from_path_string, CamelCaseModel

{% block imports %}
{% endblock imports %}

def get_module_name(classpath: str) -> str:
    return '.'.join(classpath.split('.')[:-1])

def is_func(obj):
  return str(type(obj)) == "<class 'function'>"


{%- for component in layer_components -%}
{%- include "componentv2.py.jinja" -%}
{%- endfor %}

{%- for component in featurizer_components -%}
{%- include "componentv2.py.jinja" -%}
{%- endfor %}

LayersType = Annotated[Union[
    {% for component in layer_components: -%}
    {{ component['prefix'] + "LayerConfig" }},
    {% endfor %}
], Field(discriminator="type")]

FeaturizersType = Annotated[Union[
    {% for component in featurizer_components: -%}
    {{ component['prefix'] + "LayerConfig" }},
    {% endfor %}
], Field(discriminator="type")]

LayersArgsType = Annotated[Union[
    {% for component in layer_components: -%}
    {{ component['prefix'] + "Summary" }},
    {% endfor %}
], Field(discriminator="type")]

FeaturizersArgsType = Annotated[Union[
    {% for component in featurizer_components: -%}
    {{ component['prefix'] + "Summary" }},
    {%- endfor %}
], Field(discriminator="type")]

