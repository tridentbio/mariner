version: "3.3"
services:
  db:
    image: postgres:12
    volumes:
      - app-db-data:/var/lib/postgresql/data/pgdata
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
      - PGUSER=postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports: 
      - "5432:5432"
    networks:
      - ray_net
  backend:
    image: 'image:latest'
    depends_on:
      db:
        condition: service_healthy
      mlflow:
        condition: service_healthy
      ray-head:
        condition: service_started
      ray-worker:
        condition: service_started
    ports:
      - 80:80
      - 8888:8888
    env_file:
      - ./.env
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_MODELS_BUCKEY=${AWS_MODELS_BUCKET}
      - AWS_REGION=${AWS_REGION}
      - AWS_DATASETS=${AWS_DATASETS}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 5s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    volumes:
      - ./cov:/app/cov
    build:
      context: .
      dockerfile: ./dockerfiles/Dockerfile.local
    networks:
      - ray_net
    command: bash -c 'poetry run sh /app/scripts/prestart.sh && poetry run python -m api.main'

  mlflowdb:
    image: postgres:12
    volumes:
      - app-mlflow-data:/var/lib/postgresql/data/pgdata
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
      - POSTGRES_SERVER=mlflowdb
      - POSTGRES_PORT=5432
      - PGUSER=postgres
    ports: 
      - "54321:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 2s
      retries: 15
    networks:
      - ray_net


  mlflow:
    depends_on:
      mlflowdb:
        condition: service_healthy
    build:
      context: .
      dockerfile: ./dockerfiles/Dockerfile.local
    env_file:
      - ./.env

    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_MODELS_BUCKEY=${AWS_MODELS_BUCKET}
      - AWS_REGION=${AWS_REGION}
      - AWS_DATASETS=${AWS_DATASETS}
      - POSTGRES_SERVER=mlflowdb
      - POSTGRES_PORT=5432
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 5s
      timeout: 60s
      retries: 3
      start_period: 90s
    restart: unless-stopped
    command: bash -c 'poetry run mlflow server --host 0.0.0.0 --port 5000 --default-artifact-root s3://dev-mariner-datasets --backend-store-uri postgresql://postgres:123456@mlflowdb:5432/app'
      #command: bash -c 'while true; do sleep 1; done;'
    ports:
      - "5000:5000"
    networks:
      - ray_net

  ray-head:
    build:
      context: .
      dockerfile: ./dockerfiles/Dockerfile.local
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_MODELS_BUCKEY=${AWS_MODELS_BUCKET}
      - AWS_REGION=${AWS_REGION}
      - AWS_DATASETS=${AWS_DATASETS}
    env_file:
      - ./.env
    ports:
      - "6379:6379"
      - "8265:8265"
      - "10001:10001"
      - "8000:8000"

    command: bash -c "poetry run ray start --head --dashboard-port=8265 --port=6379 --dashboard-host=0.0.0.0 && serve start && while true; do sleep 1; done;"
    shm_size: 3g
    networks:
      - ray_net
  ray-worker:
    build:
      context: .
      dockerfile: ./dockerfiles/Dockerfile.local
    env_file:
      - ./.env
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_MODELS_BUCKEY=${AWS_MODELS_BUCKET}
      - AWS_REGION=${AWS_REGION}
      - AWS_DATASETS=${AWS_DATASETS}
    depends_on: 
      - ray-head
    command: bash -c "poetry run ray start --address=ray-head:6379 --num-cpus=1 --block" 
    shm_size: 3g
    networks:
      - ray_net
volumes:
  app-db-data:
  app-mlflow-data:

networks:
  ray_net:
    ipam:
      driver: default
      config:
        - subnet: 172.63.0.0/16
