############################################################################
# This code was autogenerated. Make changes to app/features/model/templates
############################################################################

from typing import Optional, Literal, Union, List, Any
from model_builder.utils import get_class_from_path_string
from mariner.schemas.api import ApiBaseModel



def get_module_name(classpath: str) -> str:
    return '.'.join(classpath.split('.')[:-1])

def is_func(obj):
  return str(type(obj)) == "<class 'function'>"


class BaseLayerConfig(ApiBaseModel):
    name: str
    input: Union[str, List[str]]
    def create(self):
      pass


class ModelbuilderonehotConstructorArgsSummary(ApiBaseModel):
    """
    Summarizes what types are the arguments necessary to instantiate model_builder.layers.OneHot
    
    Generated code
    """
    type = 'model_builder.layers.OneHot'



class ModelbuilderonehotForwardArgsSummary(ApiBaseModel):
    """
    Maps to references for the the arguments of model_builder.layers.OneHot.forward or model_builder.layers.OneHot.__call__

    References can be names of layers/featurizers defined in the same model config or reference an attribute
    of the same component

    Generated code
    """
    x1 = "typing.Union[list[str], list[int]]"

class ModelbuilderonehotForwardArgsReferences(ApiBaseModel):
    x1: str




class ModelbuilderonehotSummary(ApiBaseModel):
    type = 'model_builder.layers.OneHot'
    constructor_args_summary = ModelbuilderonehotConstructorArgsSummary()
    
    forward_args_summary = ModelbuilderonehotForwardArgsSummary()
    




class ModelbuilderonehotLayerConfig(BaseLayerConfig):
    """
    Layer configuration.

    "type" is a discriminator field, and each possible value for it the
    args type will be mapped to the arguments of the respective class

    Generated code
    """
    type = 'model_builder.layers.OneHot'
    
    def create(self):
        lib_cls = get_class_from_path_string(self.type)
        if is_func(lib_cls):
          return lib_cls
        return lib_cls()
    
    
    forwardArgs: ModelbuilderonehotForwardArgsReferences

    




class ModelbuilderglobalpoolingConstructorArgsSummary(ApiBaseModel):
    """
    Summarizes what types are the arguments necessary to instantiate model_builder.layers.GlobalPooling
    
    Generated code
    """
    type = 'model_builder.layers.GlobalPooling'
    aggr = "<class 'str'>"



class ModelbuilderglobalpoolingForwardArgsSummary(ApiBaseModel):
    """
    Maps to references for the the arguments of model_builder.layers.GlobalPooling.forward or model_builder.layers.GlobalPooling.__call__

    References can be names of layers/featurizers defined in the same model config or reference an attribute
    of the same component

    Generated code
    """
    x = "<class 'torch.Tensor'>"
    batch = "typing.Optional[torch.Tensor]"
    size =  "typing.Optional[int]?"

class ModelbuilderglobalpoolingForwardArgsReferences(ApiBaseModel):
    x: str
    batch: str
    size: Optional[str] = None




class ModelbuilderglobalpoolingSummary(ApiBaseModel):
    type = 'model_builder.layers.GlobalPooling'
    constructor_args_summary = ModelbuilderglobalpoolingConstructorArgsSummary()
    
    forward_args_summary = ModelbuilderglobalpoolingForwardArgsSummary()
    



class ModelbuilderglobalpoolingConstructorArgs(ApiBaseModel):
    """
    Maps to the arguments of model_builder.layers.GlobalPooling

    Generated code
    """
    aggr: str




class ModelbuilderglobalpoolingLayerConfig(BaseLayerConfig):
    """
    Layer configuration.

    "type" is a discriminator field, and each possible value for it the
    args type will be mapped to the arguments of the respective class

    Generated code
    """
    type = 'model_builder.layers.GlobalPooling'
    
    constructorArgs: ModelbuilderglobalpoolingConstructorArgs
    def create(self):
        lib_cls = get_class_from_path_string(self.type)
        if is_func(lib_cls):
          return lib_cls
        return lib_cls(**self.constructorArgs.dict())
    
    
    forwardArgs: ModelbuilderglobalpoolingForwardArgsReferences

    




class ModelbuilderconcatConstructorArgsSummary(ApiBaseModel):
    """
    Summarizes what types are the arguments necessary to instantiate model_builder.layers.Concat
    
    Generated code
    """
    type = 'model_builder.layers.Concat'



class ModelbuilderconcatForwardArgsSummary(ApiBaseModel):
    """
    Maps to references for the the arguments of model_builder.layers.Concat.forward or model_builder.layers.Concat.__call__

    References can be names of layers/featurizers defined in the same model config or reference an attribute
    of the same component

    Generated code
    """
    x1 = "<class 'torch.Tensor'>"
    x2 = "<class 'torch.Tensor'>"

class ModelbuilderconcatForwardArgsReferences(ApiBaseModel):
    x1: str
    x2: str




class ModelbuilderconcatSummary(ApiBaseModel):
    type = 'model_builder.layers.Concat'
    constructor_args_summary = ModelbuilderconcatConstructorArgsSummary()
    
    forward_args_summary = ModelbuilderconcatForwardArgsSummary()
    




class ModelbuilderconcatLayerConfig(BaseLayerConfig):
    """
    Layer configuration.

    "type" is a discriminator field, and each possible value for it the
    args type will be mapped to the arguments of the respective class

    Generated code
    """
    type = 'model_builder.layers.Concat'
    
    def create(self):
        lib_cls = get_class_from_path_string(self.type)
        if is_func(lib_cls):
          return lib_cls
        return lib_cls()
    
    
    forwardArgs: ModelbuilderconcatForwardArgsReferences

    




class TorchlinearConstructorArgsSummary(ApiBaseModel):
    """
    Summarizes what types are the arguments necessary to instantiate torch.nn.Linear
    
    Generated code
    """
    type = 'torch.nn.Linear'
    in_features = "<class 'int'>"
    out_features = "<class 'int'>"
    bias = "<class 'bool'>?"



class TorchlinearForwardArgsSummary(ApiBaseModel):
    """
    Maps to references for the the arguments of torch.nn.Linear.forward or torch.nn.Linear.__call__

    References can be names of layers/featurizers defined in the same model config or reference an attribute
    of the same component

    Generated code
    """
    input = "<class 'torch.Tensor'>"

class TorchlinearForwardArgsReferences(ApiBaseModel):
    input: str




class TorchlinearSummary(ApiBaseModel):
    type = 'torch.nn.Linear'
    constructor_args_summary = TorchlinearConstructorArgsSummary()
    
    forward_args_summary = TorchlinearForwardArgsSummary()
    



class TorchlinearConstructorArgs(ApiBaseModel):
    """
    Maps to the arguments of torch.nn.Linear

    Generated code
    """
    in_features: int
    out_features: int
    bias: Optional[bool] = None




class TorchlinearLayerConfig(BaseLayerConfig):
    """
    Layer configuration.

    "type" is a discriminator field, and each possible value for it the
    args type will be mapped to the arguments of the respective class

    Generated code
    """
    type = 'torch.nn.Linear'
    
    constructorArgs: TorchlinearConstructorArgs
    def create(self):
        lib_cls = get_class_from_path_string(self.type)
        if is_func(lib_cls):
          return lib_cls
        return lib_cls(**self.constructorArgs.dict())
    
    
    forwardArgs: TorchlinearForwardArgsReferences

    




class TorchsigmoidConstructorArgsSummary(ApiBaseModel):
    """
    Summarizes what types are the arguments necessary to instantiate torch.nn.Sigmoid
    
    Generated code
    """
    type = 'torch.nn.Sigmoid'



class TorchsigmoidForwardArgsSummary(ApiBaseModel):
    """
    Maps to references for the the arguments of torch.nn.Sigmoid.forward or torch.nn.Sigmoid.__call__

    References can be names of layers/featurizers defined in the same model config or reference an attribute
    of the same component

    Generated code
    """
    input = "<class 'torch.Tensor'>"

class TorchsigmoidForwardArgsReferences(ApiBaseModel):
    input: str




class TorchsigmoidSummary(ApiBaseModel):
    type = 'torch.nn.Sigmoid'
    constructor_args_summary = TorchsigmoidConstructorArgsSummary()
    
    forward_args_summary = TorchsigmoidForwardArgsSummary()
    




class TorchsigmoidLayerConfig(BaseLayerConfig):
    """
    Layer configuration.

    "type" is a discriminator field, and each possible value for it the
    args type will be mapped to the arguments of the respective class

    Generated code
    """
    type = 'torch.nn.Sigmoid'
    
    def create(self):
        lib_cls = get_class_from_path_string(self.type)
        if is_func(lib_cls):
          return lib_cls
        return lib_cls()
    
    
    forwardArgs: TorchsigmoidForwardArgsReferences

    




class TorchreluConstructorArgsSummary(ApiBaseModel):
    """
    Summarizes what types are the arguments necessary to instantiate torch.nn.ReLU
    
    Generated code
    """
    type = 'torch.nn.ReLU'
    inplace = "<class 'bool'>?"



class TorchreluForwardArgsSummary(ApiBaseModel):
    """
    Maps to references for the the arguments of torch.nn.ReLU.forward or torch.nn.ReLU.__call__

    References can be names of layers/featurizers defined in the same model config or reference an attribute
    of the same component

    Generated code
    """
    input = "<class 'torch.Tensor'>"

class TorchreluForwardArgsReferences(ApiBaseModel):
    input: str




class TorchreluSummary(ApiBaseModel):
    type = 'torch.nn.ReLU'
    constructor_args_summary = TorchreluConstructorArgsSummary()
    
    forward_args_summary = TorchreluForwardArgsSummary()
    



class TorchreluConstructorArgs(ApiBaseModel):
    """
    Maps to the arguments of torch.nn.ReLU

    Generated code
    """
    inplace: Optional[bool] = None




class TorchreluLayerConfig(BaseLayerConfig):
    """
    Layer configuration.

    "type" is a discriminator field, and each possible value for it the
    args type will be mapped to the arguments of the respective class

    Generated code
    """
    type = 'torch.nn.ReLU'
    
    constructorArgs: TorchreluConstructorArgs
    def create(self):
        lib_cls = get_class_from_path_string(self.type)
        if is_func(lib_cls):
          return lib_cls
        return lib_cls(**self.constructorArgs.dict())
    
    
    forwardArgs: TorchreluForwardArgsReferences

    




class TorchgeometricgcnconvConstructorArgsSummary(ApiBaseModel):
    """
    Summarizes what types are the arguments necessary to instantiate torch_geometric.nn.GCNConv
    
    Generated code
    """
    type = 'torch_geometric.nn.GCNConv'
    in_channels = "<class 'int'>"
    out_channels = "<class 'int'>"
    improved = "<class 'bool'>?"
    cached = "<class 'bool'>?"
    add_self_loops = "<class 'bool'>?"
    normalize = "<class 'bool'>?"
    bias = "<class 'bool'>?"



class TorchgeometricgcnconvForwardArgsSummary(ApiBaseModel):
    """
    Maps to references for the the arguments of torch_geometric.nn.GCNConv.forward or torch_geometric.nn.GCNConv.__call__

    References can be names of layers/featurizers defined in the same model config or reference an attribute
    of the same component

    Generated code
    """
    x = "<class 'torch.Tensor'>"
    edge_index = "typing.Union[torch.Tensor, torch_sparse.tensor.SparseTensor]"
    edge_weight =  "typing.Optional[torch.Tensor]?"

class TorchgeometricgcnconvForwardArgsReferences(ApiBaseModel):
    x: str
    edge_index: str
    edge_weight: Optional[str] = None




class TorchgeometricgcnconvSummary(ApiBaseModel):
    type = 'torch_geometric.nn.GCNConv'
    constructor_args_summary = TorchgeometricgcnconvConstructorArgsSummary()
    
    forward_args_summary = TorchgeometricgcnconvForwardArgsSummary()
    



class TorchgeometricgcnconvConstructorArgs(ApiBaseModel):
    """
    Maps to the arguments of torch_geometric.nn.GCNConv

    Generated code
    """
    in_channels: int
    out_channels: int
    improved: Optional[bool] = None
    cached: Optional[bool] = None
    add_self_loops: Optional[bool] = None
    normalize: Optional[bool] = None
    bias: Optional[bool] = None




class TorchgeometricgcnconvLayerConfig(BaseLayerConfig):
    """
    Layer configuration.

    "type" is a discriminator field, and each possible value for it the
    args type will be mapped to the arguments of the respective class

    Generated code
    """
    type = 'torch_geometric.nn.GCNConv'
    
    constructorArgs: TorchgeometricgcnconvConstructorArgs
    def create(self):
        lib_cls = get_class_from_path_string(self.type)
        if is_func(lib_cls):
          return lib_cls
        return lib_cls(**self.constructorArgs.dict())
    
    
    forwardArgs: TorchgeometricgcnconvForwardArgsReferences

    




class ModelbuildermoleculefeaturizerConstructorArgsSummary(ApiBaseModel):
    """
    Summarizes what types are the arguments necessary to instantiate model_builder.featurizers.MoleculeFeaturizer
    
    Generated code
    """
    type = 'model_builder.featurizers.MoleculeFeaturizer'
    allow_unknown = "<class 'bool'>"
    sym_bond_list = "<class 'bool'>"
    per_atom_fragmentation = "<class 'bool'>"



class ModelbuildermoleculefeaturizerForwardArgsSummary(ApiBaseModel):
    """
    Maps to references for the the arguments of model_builder.featurizers.MoleculeFeaturizer.forward or model_builder.featurizers.MoleculeFeaturizer.__call__

    References can be names of layers/featurizers defined in the same model config or reference an attribute
    of the same component

    Generated code
    """
    mol = "typing.Union[rdkit.Chem.rdchem.Mol, str]"

class ModelbuildermoleculefeaturizerForwardArgsReferences(ApiBaseModel):
    mol: str




class ModelbuildermoleculefeaturizerSummary(ApiBaseModel):
    type = 'model_builder.featurizers.MoleculeFeaturizer'
    constructor_args_summary = ModelbuildermoleculefeaturizerConstructorArgsSummary()
    
    forward_args_summary = ModelbuildermoleculefeaturizerForwardArgsSummary()
    



class ModelbuildermoleculefeaturizerConstructorArgs(ApiBaseModel):
    """
    Maps to the arguments of model_builder.featurizers.MoleculeFeaturizer

    Generated code
    """
    allow_unknown: bool
    sym_bond_list: bool
    per_atom_fragmentation: bool




class ModelbuildermoleculefeaturizerLayerConfig(BaseLayerConfig):
    """
    Layer configuration.

    "type" is a discriminator field, and each possible value for it the
    args type will be mapped to the arguments of the respective class

    Generated code
    """
    type = 'model_builder.featurizers.MoleculeFeaturizer'
    
    constructorArgs: ModelbuildermoleculefeaturizerConstructorArgs
    def create(self):
        lib_cls = get_class_from_path_string(self.type)
        if is_func(lib_cls):
          return lib_cls
        return lib_cls(**self.constructorArgs.dict())
    
    
    forwardArgs: ModelbuildermoleculefeaturizerForwardArgsReferences

    



LayersType = Union[
    ModelbuilderonehotLayerConfig,
    ModelbuilderglobalpoolingLayerConfig,
    ModelbuilderconcatLayerConfig,
    TorchlinearLayerConfig,
    TorchsigmoidLayerConfig,
    TorchreluLayerConfig,
    TorchgeometricgcnconvLayerConfig,
    
]

FeaturizersType = Union[
    ModelbuildermoleculefeaturizerLayerConfig,
    
]

LayersArgsType = Union[
    ModelbuilderonehotSummary,
    ModelbuilderglobalpoolingSummary,
    ModelbuilderconcatSummary,
    TorchlinearSummary,
    TorchsigmoidSummary,
    TorchreluSummary,
    TorchgeometricgcnconvSummary,
    
]

FeaturizersArgsType = Union[
    ModelbuildermoleculefeaturizerSummary,
]

