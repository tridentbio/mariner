############################################################################
# This code was autogenerated. Make changes to app/features/model/templates
############################################################################

from typing import List, Optional, Union

from mariner.schemas.api import ApiBaseModel


def get_module_name(classpath: str) -> str:
    return ".".join(classpath.split(".")[:-1])


def is_func(obj):
    return str(type(obj)) == "<class 'function'>"


class BaseLayerConfig(ApiBaseModel):
    name: str
    input: Union[str, List[str]]

    def create(self):
        pass


class ApponehotConstructorArgsSummary(ApiBaseModel):
    """
    Summarizes what types are the arguments necessary to instantiate app.features.model.layers.OneHot

    Generated code
    """

    type = "app.features.model.layers.OneHot"


class ApponehotForwardArgsSummary(ApiBaseModel):
    """
    Maps to references for the the arguments of app.features.model.layers.OneHot.forward or app.features.model.layers.OneHot.__call__

    References can be names of layers/featurizers defined in the same model config or reference an attribute
    of the same component

    Generated code
    """

    x1 = "typing.Union[list[str], list[int]]"


class ApponehotForwardArgsReferences(ApiBaseModel):
    x1: str


class ApponehotSummary(ApiBaseModel):
    type = "app.features.model.layers.OneHot"
    constructor_args_summary: ApponehotConstructorArgsSummary

    forward_args_summary: ApponehotForwardArgsSummary


class ApponehotLayerConfig(BaseLayerConfig):
    """
    Layer configuration.

    "type" is a discriminator field, and each possible value for it the
    args type will be mapped to the arguments of the respective class

    Generated code
    """

    type = "app.features.model.layers.OneHot"

    def create(self):
        lib_cls = get_class_from_path_string(self.type)
        if is_func(lib_cls):
            return lib_cls
        return lib_cls()

    forwardArgs: ApponehotForwardArgsReferences


class AppglobalpoolingConstructorArgsSummary(ApiBaseModel):
    """
    Summarizes what types are the arguments necessary to instantiate app.features.model.layers.GlobalPooling

    Generated code
    """

    type = "app.features.model.layers.GlobalPooling"
    aggr = "<class 'str'>"


class AppglobalpoolingForwardArgsSummary(ApiBaseModel):
    """
    Maps to references for the the arguments of app.features.model.layers.GlobalPooling.forward or app.features.model.layers.GlobalPooling.__call__

    References can be names of layers/featurizers defined in the same model config or reference an attribute
    of the same component

    Generated code
    """

    x = "<class 'torch.Tensor'>"
    batch = "typing.Optional[torch.Tensor]"
    size = "typing.Optional[int]?"


class AppglobalpoolingForwardArgsReferences(ApiBaseModel):
    x: str
    batch: str
    size: Optional[str] = None


class AppglobalpoolingSummary(ApiBaseModel):
    type = "app.features.model.layers.GlobalPooling"
    constructor_args_summary: AppglobalpoolingConstructorArgsSummary

    forward_args_summary: AppglobalpoolingForwardArgsSummary


class AppglobalpoolingConstructorArgs(ApiBaseModel):
    """
    Maps to the arguments of app.features.model.layers.GlobalPooling

    Generated code
    """

    aggr: str


class AppglobalpoolingLayerConfig(BaseLayerConfig):
    """
    Layer configuration.

    "type" is a discriminator field, and each possible value for it the
    args type will be mapped to the arguments of the respective class

    Generated code
    """

    type = "app.features.model.layers.GlobalPooling"

    constructorArgs: AppglobalpoolingConstructorArgs

    def create(self):
        lib_cls = get_class_from_path_string(self.type)
        if is_func(lib_cls):
            return lib_cls
        return lib_cls(**self.constructorArgs.dict())

    forwardArgs: AppglobalpoolingForwardArgsReferences


class AppconcatConstructorArgsSummary(ApiBaseModel):
    """
    Summarizes what types are the arguments necessary to instantiate app.features.model.layers.Concat

    Generated code
    """

    type = "app.features.model.layers.Concat"


class AppconcatForwardArgsSummary(ApiBaseModel):
    """
    Maps to references for the the arguments of app.features.model.layers.Concat.forward or app.features.model.layers.Concat.__call__

    References can be names of layers/featurizers defined in the same model config or reference an attribute
    of the same component

    Generated code
    """

    x1 = "<class 'torch.Tensor'>"
    x2 = "<class 'torch.Tensor'>"


class AppconcatForwardArgsReferences(ApiBaseModel):
    x1: str
    x2: str


class AppconcatSummary(ApiBaseModel):
    type = "app.features.model.layers.Concat"
    constructor_args_summary: AppconcatConstructorArgsSummary

    forward_args_summary: AppconcatForwardArgsSummary


class AppconcatLayerConfig(BaseLayerConfig):
    """
    Layer configuration.

    "type" is a discriminator field, and each possible value for it the
    args type will be mapped to the arguments of the respective class

    Generated code
    """

    type = "app.features.model.layers.Concat"

    def create(self):
        lib_cls = get_class_from_path_string(self.type)
        if is_func(lib_cls):
            return lib_cls
        return lib_cls()

    forwardArgs: AppconcatForwardArgsReferences


class TorchlinearConstructorArgsSummary(ApiBaseModel):
    """
    Summarizes what types are the arguments necessary to instantiate torch.nn.Linear

    Generated code
    """

    type = "torch.nn.Linear"
    in_features = "<class 'int'>"
    out_features = "<class 'int'>"
    bias = "<class 'bool'>?"


class TorchlinearForwardArgsSummary(ApiBaseModel):
    """
    Maps to references for the the arguments of torch.nn.Linear.forward or torch.nn.Linear.__call__

    References can be names of layers/featurizers defined in the same model config or reference an attribute
    of the same component

    Generated code
    """

    input = "<class 'torch.Tensor'>"


class TorchlinearForwardArgsReferences(ApiBaseModel):
    input: str


class TorchlinearSummary(ApiBaseModel):
    type = "torch.nn.Linear"
    constructor_args_summary: TorchlinearConstructorArgsSummary

    forward_args_summary: TorchlinearForwardArgsSummary


class TorchlinearConstructorArgs(ApiBaseModel):
    """
    Maps to the arguments of torch.nn.Linear

    Generated code
    """

    in_features: int
    out_features: int
    bias: Optional[bool] = None


class TorchlinearLayerConfig(BaseLayerConfig):
    """
    Layer configuration.

    "type" is a discriminator field, and each possible value for it the
    args type will be mapped to the arguments of the respective class

    Generated code
    """

    type = "torch.nn.Linear"

    constructorArgs: TorchlinearConstructorArgs

    def create(self):
        lib_cls = get_class_from_path_string(self.type)
        if is_func(lib_cls):
            return lib_cls
        return lib_cls(**self.constructorArgs.dict())

    forwardArgs: TorchlinearForwardArgsReferences


class TorchsigmoidConstructorArgsSummary(ApiBaseModel):
    """
    Summarizes what types are the arguments necessary to instantiate torch.nn.Sigmoid

    Generated code
    """

    type = "torch.nn.Sigmoid"


class TorchsigmoidForwardArgsSummary(ApiBaseModel):
    """
    Maps to references for the the arguments of torch.nn.Sigmoid.forward or torch.nn.Sigmoid.__call__

    References can be names of layers/featurizers defined in the same model config or reference an attribute
    of the same component

    Generated code
    """

    input = "<class 'torch.Tensor'>"


class TorchsigmoidForwardArgsReferences(ApiBaseModel):
    input: str


class TorchsigmoidSummary(ApiBaseModel):
    type = "torch.nn.Sigmoid"
    constructor_args_summary: TorchsigmoidConstructorArgsSummary

    forward_args_summary: TorchsigmoidForwardArgsSummary


class TorchsigmoidLayerConfig(BaseLayerConfig):
    """
    Layer configuration.

    "type" is a discriminator field, and each possible value for it the
    args type will be mapped to the arguments of the respective class

    Generated code
    """

    type = "torch.nn.Sigmoid"

    def create(self):
        lib_cls = get_class_from_path_string(self.type)
        if is_func(lib_cls):
            return lib_cls
        return lib_cls()

    forwardArgs: TorchsigmoidForwardArgsReferences


class TorchreluConstructorArgsSummary(ApiBaseModel):
    """
    Summarizes what types are the arguments necessary to instantiate torch.nn.ReLU

    Generated code
    """

    type = "torch.nn.ReLU"
    inplace = "<class 'bool'>?"


class TorchreluForwardArgsSummary(ApiBaseModel):
    """
    Maps to references for the the arguments of torch.nn.ReLU.forward or torch.nn.ReLU.__call__

    References can be names of layers/featurizers defined in the same model config or reference an attribute
    of the same component

    Generated code
    """

    input = "<class 'torch.Tensor'>"


class TorchreluForwardArgsReferences(ApiBaseModel):
    input: str


class TorchreluSummary(ApiBaseModel):
    type = "torch.nn.ReLU"
    constructor_args_summary: TorchreluConstructorArgsSummary

    forward_args_summary: TorchreluForwardArgsSummary


class TorchreluConstructorArgs(ApiBaseModel):
    """
    Maps to the arguments of torch.nn.ReLU

    Generated code
    """

    inplace: Optional[bool] = None


class TorchreluLayerConfig(BaseLayerConfig):
    """
    Layer configuration.

    "type" is a discriminator field, and each possible value for it the
    args type will be mapped to the arguments of the respective class

    Generated code
    """

    type = "torch.nn.ReLU"

    constructorArgs: TorchreluConstructorArgs

    def create(self):
        lib_cls = get_class_from_path_string(self.type)
        if is_func(lib_cls):
            return lib_cls
        return lib_cls(**self.constructorArgs.dict())

    forwardArgs: TorchreluForwardArgsReferences


class TorchgeometricgcnconvConstructorArgsSummary(ApiBaseModel):
    """
    Summarizes what types are the arguments necessary to instantiate torch_geometric.nn.GCNConv

    Generated code
    """

    type = "torch_geometric.nn.GCNConv"
    in_channels = "<class 'int'>"
    out_channels = "<class 'int'>"
    improved = "<class 'bool'>?"
    cached = "<class 'bool'>?"
    add_self_loops = "<class 'bool'>?"
    normalize = "<class 'bool'>?"
    bias = "<class 'bool'>?"


class TorchgeometricgcnconvForwardArgsSummary(ApiBaseModel):
    """
    Maps to references for the the arguments of torch_geometric.nn.GCNConv.forward or torch_geometric.nn.GCNConv.__call__

    References can be names of layers/featurizers defined in the same model config or reference an attribute
    of the same component

    Generated code
    """

    x = "<class 'torch.Tensor'>"
    edge_index = "typing.Union[torch.Tensor, torch_sparse.tensor.SparseTensor]"
    edge_weight = "typing.Optional[torch.Tensor]?"


class TorchgeometricgcnconvForwardArgsReferences(ApiBaseModel):
    x: str
    edge_index: str
    edge_weight: Optional[str] = None


class TorchgeometricgcnconvSummary(ApiBaseModel):
    type = "torch_geometric.nn.GCNConv"
    constructor_args_summary: TorchgeometricgcnconvConstructorArgsSummary

    forward_args_summary: TorchgeometricgcnconvForwardArgsSummary


class TorchgeometricgcnconvConstructorArgs(ApiBaseModel):
    """
    Maps to the arguments of torch_geometric.nn.GCNConv

    Generated code
    """

    in_channels: int
    out_channels: int
    improved: Optional[bool] = None
    cached: Optional[bool] = None
    add_self_loops: Optional[bool] = None
    normalize: Optional[bool] = None
    bias: Optional[bool] = None


class TorchgeometricgcnconvLayerConfig(BaseLayerConfig):
    """
    Layer configuration.

    "type" is a discriminator field, and each possible value for it the
    args type will be mapped to the arguments of the respective class

    Generated code
    """

    type = "torch_geometric.nn.GCNConv"

    constructorArgs: TorchgeometricgcnconvConstructorArgs

    def create(self):
        lib_cls = get_class_from_path_string(self.type)
        if is_func(lib_cls):
            return lib_cls
        return lib_cls(**self.constructorArgs.dict())

    forwardArgs: TorchgeometricgcnconvForwardArgsReferences


class AppmoleculefeaturizerConstructorArgsSummary(ApiBaseModel):
    """
    Summarizes what types are the arguments necessary to instantiate app.features.model.featurizers.MoleculeFeaturizer

    Generated code
    """

    type = "app.features.model.featurizers.MoleculeFeaturizer"
    allow_unknown = "<class 'bool'>"
    sym_bond_list = "<class 'bool'>"
    per_atom_fragmentation = "<class 'bool'>"


class AppmoleculefeaturizerForwardArgsSummary(ApiBaseModel):
    """
    Maps to references for the the arguments of app.features.model.featurizers.MoleculeFeaturizer.forward or app.features.model.featurizers.MoleculeFeaturizer.__call__

    References can be names of layers/featurizers defined in the same model config or reference an attribute
    of the same component

    Generated code
    """

    mol = "typing.Union[rdkit.Chem.rdchem.Mol, str]"


class AppmoleculefeaturizerForwardArgsReferences(ApiBaseModel):
    mol: str


class AppmoleculefeaturizerSummary(ApiBaseModel):
    type = "app.features.model.featurizers.MoleculeFeaturizer"
    constructor_args_summary: AppmoleculefeaturizerConstructorArgsSummary

    forward_args_summary: AppmoleculefeaturizerForwardArgsSummary


class AppmoleculefeaturizerConstructorArgs(ApiBaseModel):
    """
    Maps to the arguments of app.features.model.featurizers.MoleculeFeaturizer

    Generated code
    """

    allow_unknown: bool
    sym_bond_list: bool
    per_atom_fragmentation: bool


class AppmoleculefeaturizerLayerConfig(BaseLayerConfig):
    """
    Layer configuration.

    "type" is a discriminator field, and each possible value for it the
    args type will be mapped to the arguments of the respective class

    Generated code
    """

    type = "app.features.model.featurizers.MoleculeFeaturizer"

    constructorArgs: AppmoleculefeaturizerConstructorArgs

    def create(self):
        lib_cls = get_class_from_path_string(self.type)
        if is_func(lib_cls):
            return lib_cls
        return lib_cls(**self.constructorArgs.dict())

    forwardArgs: AppmoleculefeaturizerForwardArgsReferences


LayersType = Union[
    ApponehotLayerConfig,
    AppglobalpoolingLayerConfig,
    AppconcatLayerConfig,
    TorchlinearLayerConfig,
    TorchsigmoidLayerConfig,
    TorchreluLayerConfig,
    TorchgeometricgcnconvLayerConfig,
]

FeaturizersType = Union[
    AppmoleculefeaturizerLayerConfig,
]

LayersArgsType = Union[
    ApponehotSummary,
    AppglobalpoolingSummary,
    AppconcatSummary,
    TorchlinearSummary,
    TorchsigmoidSummary,
    TorchreluSummary,
    TorchgeometricgcnconvSummary,
]

FeaturizersArgsType = Union[
    AppmoleculefeaturizerSummary,
]
