name: Deploy to Develop

on:
  push:
    branches:
      - helm-packages
jobs:
  test:
    runs-on: ubuntu-latest
    services:
      db:
        image: postgres
        ports:
          - "5432:5432"
        env:
          POSTGRES_SERVER: localhost
          POSTGRES_PASSWORD: 123456
          POSTGRES_USER: postgres
          POSTGRES_DB: app
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      mlflowdb:
        image: postgres
        ports:
          - "54321:5432"
        env:
          POSTGRES_SERVER: localhost
          POSTGRES_PASSWORD: 123456
          POSTGRES_USER: postgres
          POSTGRES_DB: app
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      mlflow:
        image: larribas/mlflow
        env:
          POSTGRES_SERVER: localhost
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: 123456
          POSTGRES_DB: app
          POSTGRES_PORT: 54321
        ports:
          - "5000:5000"
    steps:
      #----------------------------------------------
      # check-out repo and set-up python
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v2
      - name: Build the stack
        run: docker-compose -f docker-compose-cicd.yml up -d 
      - name: Test
        run: docker-compose ps
      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      #----------------------------------------------
      # install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      #----------------------------------------------
      # load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        working-directory: ./app
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      #----------------------------------------------
      # install your root project, if required
      #----------------------------------------------
      - name: Install library
        working-directory: ./app
        run: |
          poetry install --no-interaction && \
          poetry run install_deps_cpu
      #----------------------------------------------
      # run migrations
      #----------------------------------------------
      - name: Run migrations
        working-directory: ./app
        run: |
          poetry run alembic upgrade head
          poetry run initial_data
        env:
          POSTGRES_SERVER: localhost
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: 123456
          POSTGRES_DB: app
      #----------------------------------------------
      # run test suite
      #----------------------------------------------
      - name: Run tests
        working-directory: ./app
        run: |
          pip3 install --upgrade requests
          source .venv/bin/activate
          poetry run pytest
          coverage report
        env:
          SERVER_NAME: localhost
          SERVER_HOST: http://localhost
          SENTRY_DSN: ''
          AWS_SECRET_KEY_ID: none
          AWS_SECRET_KEY: none
          DOMAIN: localhost
          STACK_NAME: mariner-trident-bio
          BACKEND_CORS_ORIGINS: '["http://localhost", "http://localhost:4200", "http://localhost:3000", "http://localhost:8080", "https://localhost", "https://localhost:4200", "https://localhost:3000", "https://localhost:8080", "http://dev.mariner.trident.bio", "https://stag.mariner.trident.bio", "https://mariner.trident.bio", "http://local.dockertoolbox.tiangolo.com", "http://localhost.tiangolo.com"]'
          PROJECT_NAME: mariner
          SECRET_KEY: 17a0be0cc06b63120770c707f14529c28d9af8d201523d022614f67eb04d8ec7
          FIRST_SUPERUSER: admin@mariner.trident.bio
          FIRST_SUPERUSER_PASSWORD: 123456
          SMTP_TLS: True
          SMTP_PORT: 587
          SMTP_HOST: smtp.gmail.com
          SMTP_USER: admin@mariner.trident.bio
          SMTP_PASSWORD: 12345
          EMAILS_FROM_EMAIL: info@mariner.trident.bio
          USERS_OPEN_REGISTRATION: False
          # Postgres
          POSTGRES_SERVER: localhost
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: 123456
          POSTGRES_DB: app
          MLFLOW_TRACKING_URI: http://localhost:5000
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-20.04
    needs: test
    steps:
    - name: Information
      env:
        BRANCH: ${{ github.event.inputs.branch }}
      run: |
        if [ -n "$BRANCH" ]
        then
          echo Deploying "$BRANCH" for "$DEPLOYMENT_NAME"
        else
          echo Deploying default branch for "$DEPLOYMENT_NAME"
        fi
    - name: Build - Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    - name: Build - Git Checkout
      uses: actions/checkout@v2
      with:
        ref: ${{ github.event.inputs.branch }}
        persist-credentials: false
    - name: Build - Get ECR Repository
      run: |
        aws ecr describe-repositories --region $AWS_REGION --repository-names $ECR_REPOSITORY > /dev/null 2>&1 || \
          aws ecr create-repository --region $AWS_REGION  --repository-name $ECR_REPOSITORY
    - name: Build - Login to ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: Build - Build and push image
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG . 
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY -a
    - name: Deploy - Setup Credentials
      id: setup-kubeconfig
      run: |
        aws eks --region $AWS_REGION update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }}
    - name: Deploy - Update Kubernetes Deployment
      id: deploy-to-eks
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        HEALTH_CHECK_URL: ${{ secrets.HEALTH_CHECK_URL }}
        CONFIGMAP: ${{ secrets.CONFIGMAP }}
        REPLICA_COUNT: ${{ secrets.REPLICA_COUNT }}
      run: |
        curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.23.6/bin/linux/amd64/kubectl &&\
        chmod +x ./kubectl &&\
        mv ./kubectl /usr/local/bin/kubectl &&\
        kubectl apply -f - <<< "$CONFIGMAP"
        helm upgrade -i "$DEPLOYMENT_NAME" helm/. \
          --set "replicaCount=$REPLICA_COUNT" \
          --set "image.repository=$ECR_REGISTRY/$ECR_REPOSITORY" \
          --set "image.livenessProbe.path=$HEALTH_CHECK_URL" \
          --set "image.readinessProbe.path=$HEALTH_CHECK_URL" \
          --set "istio_url=backend.${{ secrets.HOST_ZONE }}"
        kubectl rollout status "deployment/$DEPLOYMENT_NAME"

