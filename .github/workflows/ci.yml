# Continous integration checks that can be done out of docker
name: Continuous integration
on:
  # Runs on PRs for check and easier review
  pull_request:
    # Only when PRs are targeting develop or releases/** branches
    branches: [ "develop", "releases/**" ]
    # Only when PRs are opened or there are pushs to it
    types: [opened, synchronize, closed]

  # Runs manually
  workflow_dispatch:
    inputs:
      save_src:
        type: boolean
        description: Saves the branch linting results in the repo cache
jobs:
  # Checks: pylint score, unit test cov regression
  install-and-checks:
    env:
      COVERAGES_PATH: '~/.cache/cov'
    # Service containers to run with `install-and-checks`
    services:
      # Label used to access the service container
      db:
        # Docker Hub image
        image: postgres
        ports:
          - 5432:5432
        # Provide the password for postgres
        env:
          POSTGRES_SERVER: db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: 123456
          POSTGRES_DB: app
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    runs-on: ubuntu-latest
    steps:
    # Checks into commit of the event
    - uses: actions/checkout@v3
    # Sets up python3.9
    - uses: actions/setup-python@v4
      with:
        python-version: '3.9' 
    # Sets cache to virtual environment
    - name: Cache Dependencies
      id: poetry-cache
      uses: actions/cache@v3
      with:
        path: .venv
        # First try a exact match of dependencies
        key: poetry-cache-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
        # Fallbacks to latest dependencies or default branch (develop) one
        restore-keys: poetry-cache-${{ runner.os }}

    # Restores cache with known target branch pylint results
    # Configures post step to resave-cache
    - name: Cache Pylint results (restore)
      id: pylint-cache-restore
      uses: actions/cache@v3
      with:
        # This will be the paths for the pylint stats
        # We only cache common target branches results
        # and ignore other stats that are saved as a side effect
        path: |
          ~/.cache/pylint/develop*
          ~/.cache/pylint/releases*
          ~/.cache/cov/develop*
          ~/.cache/cov/releases*
        # Using run_id to update cache even when it hits
        key: pylint-cache-${{ runner.os }}-${{ github.run_id }}
        restore-keys: pylint-cache-${{ runner.os }}
 
    # Installs poetry and configures to use virtualenv
    # created in cwd()/.venv
    - name: Install and configure Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.3.2
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true

    # Activates poetry created and cached environment
    - name: Activate virtualenv
      # Must match path in cached dependencies
      run: |
        . .venv/bin/activate

    # Installs all packages and it's dependencies
    - name: Install project
      run: poetry install


    # Installs quirkier packages
    - name: Install quirk packages
      run: python deps.py

    # On "manually" dispatched actions, compare score to the one in 
    # develop branch. If inputs.save_src is true, save branch result
    # to cache.
    # Only saves if branch is develop or releases/**
    - name: Update branch score (workflow_dispatch)
      if: github.event_name == 'workflow_dispatch'
      continue-on-error: true
      run: |
        . .venv/bin/activate
        python scripts/pylint_packages.py ${{ github.event.ref }} develop ${{ github.event.inputs.save_src && '--save-src' }}

    # On PRs, compare score to targeting branch
    - name: Check PR lint score improve (pull_request)
      if: github.event_name == 'pull_request'
      continue-on-error: true
      run: |
        . .venv/bin/activate
        python scripts/pylint_packages.py ${{ github.event.pull_request.head.ref }} ${{ github.event.pull_request.base.ref }} ${{ github.event.pull_request.merged && '--save-new-target' }}

    - name: Run unit tests and get coverage
      env:
        POSTGRES_SERVER: localhost 
        POSTGRES_PASSWORD: 123456
        POSTGRES_USER: postgres
        # (optional) The path of the target coverage json relative to the coverages dir path
        BASE_REF_COVERAGE_JSON: ${{ github.event_name == 'pull_request' && github.event.pull_request.base.ref || github.event.ref }}.json
        # (optional) The output of the coverage in json format
        JSON_OUT: ${{ github.event_name == 'pull_request' && github.event.pull_request.merged }}
      run: |
        . .venv/bin/activate # Activates virtualenv
        bash scripts/prestart.sh # Runs migrations
        PREVIOUS_COVERAGE=$(cat $COVERAGES_PATH/$BASE_REF_COVERAGE_JSON | jq .totals.percent_covered)
        echo PREVIOUS_COVERAGE=$PREVIOUS_COVERAGE
        [ $PREVIOUS_COVERAGE != '' ] && FAIL_UNDER=$( printf '--fail-under %s' $PREVIOUS_COVERAGE) || FAIL_UNDER=''
        echo FAIL_UNDER=$FAIL_UNDER
        echo ${{ github.event_name == 'pull_request' && github.event.pull_request.merged || false }} != false
        [ ${{ github.event_name == 'pull_request' && github.event.pull_request.merged || false }} != false ] && JSON_OUT=$COVERAGES_PATH/$BASE_REF_COVERAGE_JSON || JSON_OUT=''
        bash scripts/test.sh $FAIL_UNDER -m pytest -m 'not integration' --tb=line -q
