# Continous integration checks that can be done out of docker
name: Continuous integration
env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: us-east-1
  AWS_MODELS_BUCKET: s3://dev-mariner-datasets
  AWS_DATASETS: dev-mariner-datasets
  POSTGRES_URI: postgresql://postgres:123456@localhost:5432/app
  RAY_ADDRESS: ray://localhost:10001
  MLFLOW_TRACKING_URI: http://localhost:5000
  APPLICATION_SECRET: --
  AUTHENTICATION_SECRET_KEY: --
  DEPLOYMENT_URL_SIGNATURE_SECRET_KEY: --
  # (optional) The path of the target coverage json relative to the coverages dir path
  BASE_REF_COVERAGE_JSON: ${{ github.event_name == 'pull_request' && github.event.pull_request.base.ref }}.json

on:
  # Runs on PRs for check and easier review
  pull_request:
    # Only when PRs are targeting develop or releases/** branches
    branches: [ develop, releases/** ]
    # Only when PRs are opened or there are pushs to it
    types: [opened, synchronize, closed]
    paths: [backend/**/*.py]

jobs:
  # Checks: pylint score, unit test cov regression
  backend_sca:
    services:
      db:
        # Docker Hub image
        image: postgres
        ports:
          - 5432:5432
        # Provide the password for postgres
        env:
          POSTGRES_SERVER: localhost
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: 123456
          POSTGRES_DB: app
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    runs-on: ubuntu-latest
    steps:
    # Checks into commit of the event
    - uses: actions/checkout@v3
    - name: Get changed python files between base and head
      id: get_changed
      run: >
        echo "CHANGED_FILES=$(echo $(git diff --name-only ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} -- | grep \.py))" >> $GITHUB_OUTPUT
    # Sets up python3.10
    - uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    - name: Cache Dependencies
      id: venv-cache
      uses: actions/cache@v3
      with:
        path: backend/.venv
        # First try a exact match of dependencies
        key: poetry-cache-${{ runner.os }}-${{ hashFiles('**/poetry.lock', 'deps.py') }}
        # Fallbacks to latest dependencies or default branch (develop) one
        restore-keys: poetry-cache-${{ runner.os }}
          #
    # Installs poetry and configures to use virtualenv
    - name: Install and configure Poetry
      uses: snok/install-poetry@v1
      if: steps.venv-cache.outputs.cache-hit != true
      with:
        version: 1.3.2
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true
    - name: Install project
      working-directory: backend
      run: |
        poetry -v --no-ansi --no-interaction install
        poetry run python deps.py
      if: steps.venv-cache.outputs.cache-hit != true
    - name: Register pylint problem matcher # Allows annotation in PRs
      run: |
        echo "::add-matcher::.github/workflows/matchers/pylint.json"
    - name: Backend static code analysis on changed files
      working-directory: backend
      env:
        CHANGED_FILES: ${{ steps.get_changed.outputs.CHANGED_FILES }}
      run: |
        . .venv/bin/activate
        pylint --output-format="colorized" --extension-pkg-whitelist='pydantic' $CHANGED_FILES
        isort -c --diff --check-only $CHANGED_FILES
        black --check $CHANGED_FILES
    - name: Run unit tests and get coverage
      working-directory: backend
      run: |
        . .venv/bin/activate
        bash scripts/prestart.sh # Runs migrations
        coverage run -m pytest -m 'not integration'
        coverage report

