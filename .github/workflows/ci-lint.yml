name: Code Quality Analysis
on:
  pull_request:
    branches: [ "develop", "releases/**" ]
    types: [opened, synchronize]
  push:
    branches:
      - 'develop'
      - 'releases/**'
  workflow_dispatch:
    inputs:
      save_src:
        type: boolean
        description: Saves the branch linting results in the repo cache
jobs:
  pylint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v4
      with:
        python-version: '3.9' 
    - name: Cache Dependencies
      id: poetry-cache
      uses: actions/cache@v3
      with:
        path: .venv
        key: ${{ runner.os }}-poetry-cache
        restore-keys: ${{ runner.os }}-poetry-cache
    - name: Cache Pylint results
      id: pylint-cache
      uses: actions/cache@v3
      with:
        path: ~/.cache/pylint
        key: ${{ runner.os }}-pylint-cache
        restore-keys: ${{ runner.os }}-pylint-cache
    - name: Install and configure Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.3.2
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true
    - name: Install project
      run: poetry install
    - name: Update target branch score (push)
      if: github.event_name == 'push'
      run: "poetry run python scripts/pylint_packages.py ${{ github.event.ref }} ${{ github.event.base_ref || 'develop' }} --save-new-target"

    - name: Update branch score (workflow_dispatch)
      if: github.event_name == 'workflow_dispatch'
      run: "poetry run python scripts/pylint_packages.py ${{ github.event.ref }} develop ${{ github.event.inputs.save_src && '--save-new-target' }}"

    - name: Check PR lint score improve (pull_request)
      if: github.event_name == 'pull_request'
      run: "poetry run python scripts/pylint_packages.py -- ${{ github.event.pull_request.base.ref }}"

    - name: Debug lint cache
      run: ls ~/.cache/ && echo '-----' && ls .venv && ls -hal ~
