name: GNNExample
dataset:
  name: test_dataset_2
  target_column: "tpsa"
  feature_columns:
    - smiles
    - mwt
featurizers:
  - name: MolToGraphFeaturizer
    type: app.features.model.featurizers.MoleculeFeaturizer
    input:
      - smiles
    args:
      allow_unknown: false
      sym_bond_list: true
      per_atom_fragmentation: false
layers:
  # Start fst branch (from featurizer)
  - name: GCN1
    type: torch_geometric.nn.GCNConv
    args:
      in_channels: 30
      out_channels: 64
    input: MolToGraphFeaturizer
  - name: GCN1_Activation
    type: torch.nn.ReLU
    input: GCN1
  - name: GCN2 
    type: torch_geometric.nn.GCNConv
    input: GCN1_Activation
    args:
      in_channels: 64
      out_channels: 64
  - name: GCN2_Activation
    type: torch.nn.ReLU
    input: GCN2
  - name: GCN3 # an arbitrary name 
    type: torch_geometric.nn.GCNConv
    input: GCN2_Activation
    args:
      in_channels: 64
      out_channels: 64
  - name: GCN3_Activation
    type: torch.nn.ReLU
    input: GCN3
  - name: AddPool
    type: app.features.model.layers.GlobalPooling
    input: GCN3_Activation
    args:
      aggr: 'sum'
  # End of fst branch
  # Second branch would simply be linear layers in mwt
  - name: Combiner 
    type: app.features.model.layers.Concat
    input: ['AddPool', 'mwt']
  - name: LinearJoined
    type: torch.nn.Linear
    input: AddPool
    args:
      in_features: 65
      out_features: 1
  - name: Output
    type: torch.nn.Sigmoid
    input: LinearJoined
