from typing import Any, Optional, Literal, Union
from app.schemas.api import ApiBaseModel

def get_module_name(classpath: str) -> str:
    return '.'.join(classpath.split('.')[:-1])

def get_class_from_path_string(pathstring: str):
    module_name = get_module_name(pathstring)
    code = f'''
import {module_name}
references['cls'] = {pathstring}
'''
    references = {} # cls must be a reference
    exec(code, globals(), { 'references': references })
    return references['cls']

class {{ prefix }}ArgsTemplate(ApiBaseModel):
  {%- for key, value in arg_types.items() %}
    {{ key }}: Literal["{{ value }}"] = "{{ value }}"
  {%- endfor %}

class {{ prefix }}Args(ApiBaseModel):
  {%- for key, value in arg_types.items() %}
  {{ key }}: {{ value }}
  {%- endfor %}

class {{prefix}}(ApiBaseModel):
    type: Literal['{{ path }}'] = '{{ path }}'
    args_template: {{ prefix }}ArgsTemplate

    @classmethod
    def create(cls, args: {{ prefix }}Args):
        lib_cls = get_class_from_path_string(cls.type)
        return lib_cls(**args)

class {{ prefix }}Layer(ApiBaseModel):
    type: Literal['{{ path }}'] = '{{ path }}'
    args: {{ prefix }}Args
    input_layer: Optional[bool] = True
    id: str
    forward: str

