
import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../app/store';
import * as datasetsApi from './datasetsAPI'


export interface DatasetState {
  filters: datasetsApi.DatasetsListingFilters
  datasets: datasetsApi.Dataset[]
  total: number
  status: 'idle' | 'loading' | 'failed';
}

const initialState: DatasetState = {
  filters: {page: 1, per_page: 50},
  status: 'idle',
  total: 0,
  datasets: [],
};

export const fetchDatasets = createAsyncThunk(
  'datasets/fetchDatasets',
  async (filters: datasetsApi.DatasetsListingFilters) => {
    const response = await datasetsApi.fetchDatasets(filters);
    // The value we return becomes the `fulfilled` action payload
    return response
  }
);

export const datasetSlice = createSlice({
  name: 'counter',
  initialState,
  reducers: {
    // Use the PayloadAction type to declare the contents of `action.payload`
    incrementByAmount: (state, action: PayloadAction<number>) => {
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchDatasets.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchDatasets.fulfilled, (state, action) => {
        state.status = 'idle';
        state.datasets = action.payload.data
        state.total = action.payload.total
      })
      .addCase(fetchDatasets.rejected, (state) => {
        state.status = 'failed';
      });
  },
});

export const { incrementByAmount,  } = datasetSlice.actions;


// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectCount = (state: RootState) => state.counter.value;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
export const incrementIfOdd =
  (amount: number): AppThunk =>
  (dispatch, getState) => {
    const currentValue = selectCount(getState());
    if (currentValue % 2 === 1) {
      dispatch(incrementByAmount(amount));
    }
  };

export default datasetSlice.reducer;
