version: "3.4"
services:
  webapp:
    build:
      dockerfile: ../dockerfiles/Dockerfile.webapp
      context: ./webapp
    ports: 
      - 3000:3000
  mlflowdb:
    image: postgres:12
    volumes:
      - app-mlflow-data:/var/lib/postgresql/data/pgdata
    environment:
      - POSTGRES_SERVER=mlflowdb
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=123456
      - POSTGRES_DB=app
      - PGDATA=/var/lib/postgresql/data/pgdata
      - PGUSER=postgres
    ports: 
      - "54321:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 2s
      retries: 15
    networks:
      - ray_net
  db:
    image: postgres:12
    volumes:
      - app-db-data:/var/lib/postgresql/data/pgdata
    environment:
      - POSTGRES_SERVER=db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=123456
      - POSTGRES_DB=app
      - PGDATA=/var/lib/postgresql/data/pgdata
      - PGUSER=postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 2s
      retries: 15
    ports: 
      - "5432:5432"
    networks:
      - ray_net
  backend:
    image: 'image:latest'
    ports:
      - 80:80
      - 8888:8888
      - 8000:8000
    env_file:
      - backend/.env
      - backend/.env.secret
    environment:
      - RESTART=true
      - SERVER_HOST=http://backend
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - POSTGRES_URI=postgresql://postgres:123456@db:5432/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 4m 
      retries: 8

    restart: unless-stopped
    build:
      context: ./backend
      dockerfile: ../dockerfiles/Dockerfile.local
    networks:
      - ray_net
    command: bash -c 'sh /app/scripts/prestart.sh && python -m api.main'
    volumes:
      - ./backend:/app:z
      - ./source:/source:z
      - ./build:/build:z


  mlflow:
    depends_on:
      - mlflowdb
    build:
      context: ./backend
      dockerfile: ../dockerfiles/Dockerfile.local
    env_file:
      - backend/.env.secret
    environment:
      - MLFLOW_POSTGRES_URI=postgresql://postgres:123456@mlflowdb:5432/app
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - MLFLOW_ARTIFACT_URI=s3://dev-mariner-datasets
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 5s
      timeout: 60s
      retries: 3
      start_period: 90s
    restart: unless-stopped
    command:  mlflow server --host 0.0.0.0 --port 5000 --default-artifact-root ${AWS_ARTIFACT_URI-s3://dev-mariner-datasets} --backend-store-uri ${MLFLOW_POSTGRES_URI-postgresql://postgres:123456@mlflowdb:5432/app}
    ports:
      - "5000:5000"
    networks:
      - ray_net

  ray-head:
    build:
      context: ./backend
      dockerfile: ../dockerfiles/Dockerfile.local
    shm_size: '4.91gb'
    env_file:
      - backend/.env
      - backend/.env.secret
    environment:
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - SERVER_HOST=http://backend
    ports:
      - "6379:6379"
      - "8265:8265"
      - "10001:10001"
    # Docs on ray cli: https://docs.ray.io/en/latest/cluster/cli.html
    command: ray start --head --port=6379 --block --dashboard-host 0.0.0.0
    networks:
      - ray_net

  ray-worker:
    build:
      context: ./backend
      dockerfile: ../dockerfiles/Dockerfile.local
    shm_size: '4.91gb'
    environment:
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - SERVER_HOST=http://backend
    env_file:
      - backend/.env
      - backend/.env.secret
    depends_on: 
      - ray-head
    command: ray start --address=ray-head:6379 --num-cpus=8 --block
    networks:
      - ray_net

  grafana:
    image: grafana/grafana:9.3.1
    container_name: grafana
    restart: always
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning/datasources
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
      - GF_INSTALL_PLUGINS=${GF_INSTALL_PLUGINS}
    ports:
      - 3001:3000
    networks:
      - ray_net

  prometheus:
    image: prom/prometheus:v2.40.5
    container_name: prometheus
    restart: always
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yaml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=360h'
      - '--web.enable-lifecycle'
    ports:
      - 9090:9090

  e2e:
    image: cypress/included:12.6.0
    working_dir: /e2e
    environment:
      - CYPRESS_baseUrl=http://localhost:3000/
    command: sh -c "npm install && npx cypress install && npx cypress run --config-file /e2e/cypress.config.js --browser chrome"
    entrypoint: []
    network_mode: host
    depends_on: [ backend, webapp ]
    volumes:
      - ./webapp:/e2e:z
      - ./backend/tests/data:/e2e/cypress/fixtures/data:z

volumes:
  app-db-data:
  app-mlflow-data:
  grafana_data:
  prometheus_data:

networks:
  ray_net:
    ipam:
      driver: default
      config:
        - subnet: 172.63.0.0/16

